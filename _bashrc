# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ]; then
    export PATH="$HOME/bin:$PATH"
fi
if [ -d "$HOME/reversing/ida-6.6/" ]; then
    export PATH="$HOME/reversing/ida-6.6/:$PATH"
fi

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Lang
#export LANG="de_DE.UTF-8"
# Terminal un english
export LANG="en_US.UTF-8"

# Less Stuff
if [ -f "/usr/bin/most" ]; then
    export PAGER="most"
fi
if [ -f "/usr/bin/pygmentize" ]; then
    export LESSCOLORIZER="pygmentize"
fi
export LESSCOLOR="always"

# GPG Config
GPG_TTY=$(tty)
export GPG_TTY
if [ -f "${HOME}/.gnupg/.gpg-agent-info" ]; then
    . "${HOME}/.gnupg/.gpg-agent-info"
fi

# Some cool things
export HISTSIZE=1000
export HISTFILESIZE=1000
export GREP_OPTIONS='--color=auto --exclude=*~'
if [ -f "/usr/bin/firefox" ]; then
    export BROWSER="firefox"
fi

# Colorize logs
if [ -f "/usr/bin/ccze" ]; then
    lesslog() { ccze -A < $1 | less -R; }
    taillog() { tail -f $1 | ccze -A; }
fi

# Expand Shortened URLs
expandurl() { { curl -sI $1 | sed -n 's/Location:.* //p';} }

#osx color terminal
export CLICOLOR=1
# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

if [[ ${EUID} == 0 ]] ; then
    export PS1="\[\033[01;31m\]\h\[\033[00m\]\[\033[01;32m\] \[\033[01;32m\]\u \[\033[00;33m\]\w\n\[\033[01;30m\]$ \[\033[00m\]"
else
    export PS1="\[\033[01;32m\]\h\[\033[00m\]\[\033[01;32m\] \[\033[01;37m\]\u \[\033[00;33m\]\w\n\[\033[01;30m\]$ \[\033[00m\]"
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac


# Set up TERM variables.
# vt100 and xterm have no color in vim (at least on unixs), but if we call them xterm-color, they will.
# (vt100 for F-Secure SSH.)
# This may well be the case for some other terms, so I'm putting them here.
# Also set up a variable to indicate whether to set up the title functions.
# TODO gnome-terminal, or however it reports itself
case $TERM in

  screen)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=true
  ;;

  xterm-color|color_xterm|rxvt|Eterm|screen*) # screen.linux|screen-w
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=true
  ;;

  linux)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=false
  ;;

  xterm|vt100)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=true
  ;;

  *xterm*|eterm|rxvt*)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=true
  ;;

  *)
    TERM_IS_COLOR=false
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=false
  ;;

esac

# dircolors... make sure that we have a color terminal, dircolors exists, and ls supports it.
if $TERM_IS_COLOR && ( dircolors --help && ls --color ) &> /dev/null; then
  # For some reason, the unixs machines need me to use $HOME instead of ~
  # List files from highest priority to lowest.  As soon as the loop finds one that works, it will exit.
  for POSSIBLE_DIR_COLORS in "$HOME/.dir_colors" "/etc/DIR_COLORS"; do
    [[ -f "$POSSIBLE_DIR_COLORS" ]] && [[ -r "$POSSIBLE_DIR_COLORS" ]] && eval `dircolors -b "$POSSIBLE_DIR_COLORS"` && break
  done

  alias ls="ls --color=auto"
  alias ll="ls --color=auto -l"
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
else
  # No color, so put a slash at the end of directory names, etc. to differentiate.
  alias ls="ls -F"
  alias ll="ls -lF"
fi

# Some default aliases that should always be there
alias psg='ps aux |grep -i'
alias scpresume="rsync --partial --progress --rsh=ssh"
alias sslTelnet='openssl s_client -connect ' # host:port
alias todo='ssh -qt Hetzner todo.sh' # command
alias tmux='tmux -2'

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
# Set $TERM for libvte terminals that set $TERM wrong (like gnome-terminal)
{
  [ "_$TERM" = "_xterm" ] && type ldd && type grep && type tput && [ -L "/proc/$PPID/exe" ] && {
    if ldd /proc/$PPID/exe | grep libvte; then
      if [ "`tput -Txterm-256color colors`" = "256" ]; then
        TERM=xterm-256color
      elif [ "`tput -Txterm-256color colors`" = "256" ]; then
        TERM=xterm-256color
      elif tput -T xterm; then
        TERM=xterm
      fi
    fi
  }
} >/dev/null 2>/dev/null

venwrap=`type -P virtualenvwrapper_bashrc`
if [ "$venwrap" != "" ]; then
    source $venwrap
fi

if [ -f "~/.pythonrc.py" ]; then
    PYTHONSTARTUP=~/.pythonrc.py
    export PYTHONSTARTUP
fi

if [ -f "/usr/bin/git" ]; then
    parse_git_branch ()
    {
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(git::\1)/'
#      git name-rev HEAD 2> /dev/null | sed 's#HEAD\ \(.*\)#(git::\1)#'
    }
fi

if [ -f "/usr/bin/svn" ]; then
    parse_svn_branch() {
      parse_svn_url | sed -e 's#^'"$(parse_svn_repository_root)"'##g' | awk -F / '{print "(svn::"$1 "/" $2 ")"}'
    }
    parse_svn_url() {
      svn info 2>/dev/null | sed -ne 's#^URL: ##p'
    }
    parse_svn_repository_root() {
      svn info 2>/dev/null | sed -ne 's#^Repository Root: ##p'
    }
fi

if [ -f "/usr/bin/vim" ]; then
    export EDITOR=vim
fi

# Add git and svn branch names
if [[ ${EUID} != 0 ]] ; then
    if [ -f "/usr/bin/git" ]; then
        PS1="$PS1\$(parse_git_branch)"
    fi
    if [ -f "/usr/bin/svn" ]; then
        PS1="$PS1\$(parse_svn_branch)"
    fi
    export PS1="$PS1 "
fi

